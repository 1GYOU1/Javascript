/*
<피보나치 수>

문제 설명
피보나치 수는 F(0) = 0, F(1) = 1일 때, 1 이상의 n에 대하여 F(n) = F(n-1) + F(n-2) 가 적용되는 수 입니다.

예를들어

F(2) = F(0) + F(1) = 0 + 1 = 1
F(3) = F(1) + F(2) = 1 + 1 = 2
F(4) = F(2) + F(3) = 1 + 2 = 3
F(5) = F(3) + F(4) = 2 + 3 = 5
와 같이 이어집니다.

2 이상의 n이 입력되었을 때, n번째 피보나치 수를 1234567으로 나눈 나머지를 리턴하는 함수, solution을 완성해 주세요.

제한 사항
n은 2 이상 100,000 이하인 자연수입니다.
입출력 예
n	return
3	2
5	5
입출력 예 설명
피보나치수는 0번째부터 0, 1, 1, 2, 3, 5, ... 와 같이 이어집니다.
*/

// 나의 풀이
const solution = n => {
    // return n <= 1 ? n : (solution(n - 1) + solution(n - 2))% 1234567;
    
    let a = 0;// 이전 항
    let b = 1;// 현재 항
    for (let i = 2; i <= n; i++) {
        let c = (a + b)% 1234567;// 다음 항
        a = b;
        b = c;
    }
    return b;
}

/*
    피보나치 수는 외워야되는 공식,,,,F(2) = F(0) + F(1)

    1. 재귀함수(자신을 불러오는 함수)
    return n <= 1 ? n : (solution(n - 1) + solution(n - 2))% 1234567;
    n이 1보다 작거나 같을 때는 return n,
    아니라면 (solution(n - 1) + solution(n - 2)) 으로 계산
    재귀함수를 사용하여 계산하는 방법도 있지만, 시간 초과로 실패.

    2. 반복문 
    let a = 0;// 이전 항
    let b = 1;// 현재 항
    for (let i = 2; i <= n; i++) {
        let c = (a + b);// 다음 항
        a = b;
        b = c;
    }
    return b;

    "2 이상의 n이 입력되었을 때, n번째 피보나치 수를 1234567으로 나눈 나머지를 리턴하는 함수"
    -> 반복문 안에서 계속해서 1234567의 나머지를 계산해줘야 유지 가능.
*/